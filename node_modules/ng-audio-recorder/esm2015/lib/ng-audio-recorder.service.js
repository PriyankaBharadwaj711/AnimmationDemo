var NgAudioRecorderService_1;
import { __decorate } from "tslib";
import { EventEmitter, Injectable } from '@angular/core';
let NgAudioRecorderService = NgAudioRecorderService_1 = class NgAudioRecorderService {
    constructor() {
        this.chunks = [];
        this.recorderEnded = new EventEmitter();
        this.recorderError = new EventEmitter();
        // tslint:disable-next-line
        this._recorderState = RecorderState.INITIALIZING;
        this.appendToChunks = (event) => {
            this.chunks.push(event.data);
        };
        this.recordingStopped = (event) => {
            const blob = new Blob(this.chunks, { type: 'audio/webm' });
            this.chunks = [];
            this.recorderEnded.emit(blob);
            this.clear();
        };
    }
    static guc() {
        return navigator.mediaDevices.getUserMedia({ audio: true });
    }
    getUserContent() {
        return NgAudioRecorderService_1.guc();
    }
    startRecording() {
        if (this._recorderState === RecorderState.RECORDING) {
            this.recorderError.emit(ErrorCase.ALREADY_RECORDING);
        }
        if (this._recorderState === RecorderState.PAUSED) {
            this.resume();
            return;
        }
        this._recorderState = RecorderState.INITIALIZING;
        NgAudioRecorderService_1.guc().then((mediaStream) => {
            this.recorder = new MediaRecorder(mediaStream);
            this._recorderState = RecorderState.INITIALIZED;
            this.addListeners();
            this.recorder.start();
            this._recorderState = RecorderState.RECORDING;
        });
    }
    pause() {
        if (this._recorderState === RecorderState.RECORDING) {
            this.recorder.pause();
            this._recorderState = RecorderState.PAUSED;
        }
    }
    resume() {
        if (this._recorderState === RecorderState.PAUSED) {
            this._recorderState = RecorderState.RECORDING;
            this.recorder.resume();
        }
    }
    stopRecording(outputFormat) {
        this._recorderState = RecorderState.STOPPING;
        return new Promise((resolve, reject) => {
            this.recorderEnded.subscribe((blob) => {
                this._recorderState = RecorderState.STOPPED;
                if (outputFormat === OutputFormat.WEBM_BLOB) {
                    resolve(blob);
                }
                if (outputFormat === OutputFormat.WEBM_BLOB_URL) {
                    const audioURL = URL.createObjectURL(blob);
                    resolve(audioURL);
                }
            }, _ => {
                this.recorderError.emit(ErrorCase.RECORDER_TIMEOUT);
                reject(ErrorCase.RECORDER_TIMEOUT);
            });
            this.recorder.stop();
        }).catch(() => {
            this.recorderError.emit(ErrorCase.USER_CONSENT_FAILED);
        });
    }
    getRecorderState() {
        return this._recorderState;
    }
    addListeners() {
        this.recorder.ondataavailable = this.appendToChunks;
        this.recorder.onstop = this.recordingStopped;
    }
    clear() {
        this.recorder = null;
        this.chunks = [];
    }
};
NgAudioRecorderService = NgAudioRecorderService_1 = __decorate([
    Injectable()
], NgAudioRecorderService);
export { NgAudioRecorderService };
export var OutputFormat;
(function (OutputFormat) {
    OutputFormat[OutputFormat["WEBM_BLOB_URL"] = 0] = "WEBM_BLOB_URL";
    OutputFormat[OutputFormat["WEBM_BLOB"] = 1] = "WEBM_BLOB";
})(OutputFormat || (OutputFormat = {}));
export var ErrorCase;
(function (ErrorCase) {
    ErrorCase[ErrorCase["USER_CONSENT_FAILED"] = 0] = "USER_CONSENT_FAILED";
    ErrorCase[ErrorCase["RECORDER_TIMEOUT"] = 1] = "RECORDER_TIMEOUT";
    ErrorCase[ErrorCase["ALREADY_RECORDING"] = 2] = "ALREADY_RECORDING";
})(ErrorCase || (ErrorCase = {}));
export var RecorderState;
(function (RecorderState) {
    RecorderState[RecorderState["INITIALIZING"] = 0] = "INITIALIZING";
    RecorderState[RecorderState["INITIALIZED"] = 1] = "INITIALIZED";
    RecorderState[RecorderState["RECORDING"] = 2] = "RECORDING";
    RecorderState[RecorderState["PAUSED"] = 3] = "PAUSED";
    RecorderState[RecorderState["STOPPING"] = 4] = "STOPPING";
    RecorderState[RecorderState["STOPPED"] = 5] = "STOPPED";
})(RecorderState || (RecorderState = {}));
//# sourceMappingURL=data:application/json;base64,