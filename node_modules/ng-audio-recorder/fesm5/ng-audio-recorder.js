import { __decorate } from 'tslib';
import { EventEmitter, Injectable, NgModule } from '@angular/core';

var NgAudioRecorderService = /** @class */ (function () {
    function NgAudioRecorderService() {
        var _this = this;
        this.chunks = [];
        this.recorderEnded = new EventEmitter();
        this.recorderError = new EventEmitter();
        // tslint:disable-next-line
        this._recorderState = RecorderState.INITIALIZING;
        this.appendToChunks = function (event) {
            _this.chunks.push(event.data);
        };
        this.recordingStopped = function (event) {
            var blob = new Blob(_this.chunks, { type: 'audio/webm' });
            _this.chunks = [];
            _this.recorderEnded.emit(blob);
            _this.clear();
        };
    }
    NgAudioRecorderService_1 = NgAudioRecorderService;
    NgAudioRecorderService.guc = function () {
        return navigator.mediaDevices.getUserMedia({ audio: true });
    };
    NgAudioRecorderService.prototype.getUserContent = function () {
        return NgAudioRecorderService_1.guc();
    };
    NgAudioRecorderService.prototype.startRecording = function () {
        var _this = this;
        if (this._recorderState === RecorderState.RECORDING) {
            this.recorderError.emit(ErrorCase.ALREADY_RECORDING);
        }
        if (this._recorderState === RecorderState.PAUSED) {
            this.resume();
            return;
        }
        this._recorderState = RecorderState.INITIALIZING;
        NgAudioRecorderService_1.guc().then(function (mediaStream) {
            _this.recorder = new MediaRecorder(mediaStream);
            _this._recorderState = RecorderState.INITIALIZED;
            _this.addListeners();
            _this.recorder.start();
            _this._recorderState = RecorderState.RECORDING;
        });
    };
    NgAudioRecorderService.prototype.pause = function () {
        if (this._recorderState === RecorderState.RECORDING) {
            this.recorder.pause();
            this._recorderState = RecorderState.PAUSED;
        }
    };
    NgAudioRecorderService.prototype.resume = function () {
        if (this._recorderState === RecorderState.PAUSED) {
            this._recorderState = RecorderState.RECORDING;
            this.recorder.resume();
        }
    };
    NgAudioRecorderService.prototype.stopRecording = function (outputFormat) {
        var _this = this;
        this._recorderState = RecorderState.STOPPING;
        return new Promise(function (resolve, reject) {
            _this.recorderEnded.subscribe(function (blob) {
                _this._recorderState = RecorderState.STOPPED;
                if (outputFormat === OutputFormat.WEBM_BLOB) {
                    resolve(blob);
                }
                if (outputFormat === OutputFormat.WEBM_BLOB_URL) {
                    var audioURL = URL.createObjectURL(blob);
                    resolve(audioURL);
                }
            }, function (_) {
                _this.recorderError.emit(ErrorCase.RECORDER_TIMEOUT);
                reject(ErrorCase.RECORDER_TIMEOUT);
            });
            _this.recorder.stop();
        }).catch(function () {
            _this.recorderError.emit(ErrorCase.USER_CONSENT_FAILED);
        });
    };
    NgAudioRecorderService.prototype.getRecorderState = function () {
        return this._recorderState;
    };
    NgAudioRecorderService.prototype.addListeners = function () {
        this.recorder.ondataavailable = this.appendToChunks;
        this.recorder.onstop = this.recordingStopped;
    };
    NgAudioRecorderService.prototype.clear = function () {
        this.recorder = null;
        this.chunks = [];
    };
    var NgAudioRecorderService_1;
    NgAudioRecorderService = NgAudioRecorderService_1 = __decorate([
        Injectable()
    ], NgAudioRecorderService);
    return NgAudioRecorderService;
}());
var OutputFormat;
(function (OutputFormat) {
    OutputFormat[OutputFormat["WEBM_BLOB_URL"] = 0] = "WEBM_BLOB_URL";
    OutputFormat[OutputFormat["WEBM_BLOB"] = 1] = "WEBM_BLOB";
})(OutputFormat || (OutputFormat = {}));
var ErrorCase;
(function (ErrorCase) {
    ErrorCase[ErrorCase["USER_CONSENT_FAILED"] = 0] = "USER_CONSENT_FAILED";
    ErrorCase[ErrorCase["RECORDER_TIMEOUT"] = 1] = "RECORDER_TIMEOUT";
    ErrorCase[ErrorCase["ALREADY_RECORDING"] = 2] = "ALREADY_RECORDING";
})(ErrorCase || (ErrorCase = {}));
var RecorderState;
(function (RecorderState) {
    RecorderState[RecorderState["INITIALIZING"] = 0] = "INITIALIZING";
    RecorderState[RecorderState["INITIALIZED"] = 1] = "INITIALIZED";
    RecorderState[RecorderState["RECORDING"] = 2] = "RECORDING";
    RecorderState[RecorderState["PAUSED"] = 3] = "PAUSED";
    RecorderState[RecorderState["STOPPING"] = 4] = "STOPPING";
    RecorderState[RecorderState["STOPPED"] = 5] = "STOPPED";
})(RecorderState || (RecorderState = {}));

var NgAudioRecorderModule = /** @class */ (function () {
    function NgAudioRecorderModule() {
    }
    NgAudioRecorderModule = __decorate([
        NgModule({
            declarations: [],
            imports: [],
            exports: [],
            providers: [
                NgAudioRecorderService
            ]
        })
    ], NgAudioRecorderModule);
    return NgAudioRecorderModule;
}());

/*
 * Public API Surface of ng-audio-recorder
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ErrorCase, NgAudioRecorderModule, NgAudioRecorderService, OutputFormat, RecorderState };
//# sourceMappingURL=ng-audio-recorder.js.map
