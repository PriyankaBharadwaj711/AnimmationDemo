{"ast":null,"code":"import _asyncToGenerator from \"/Users/priyanka/Desktop/ODU_Projects/anim/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { StringConstants } from \"src/app/constants/string.constants\";\nimport { HttpHeaders } from '@angular/common/http';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class HTTPService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n  }\n\n  fetchRequest(url, method, body, operationFuction, callOperationFunction) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      Swal.fire({\n        title: StringConstants.loadingTitle,\n        text: StringConstants.loadingDescription,\n        allowOutsideClick: false\n      });\n      Swal.showLoading(); // *GET, POST, PUT, DELETE,\n\n      var options = {\n        \"mode\": 'cors',\n        \"cache\": 'no-cache',\n        \"credentials\": 'same-origin' // include, *same-origin, omit\n\n      };\n      var headers = new HttpHeaders().set(\"content-type\", \"application/json\").set(\"Access-Control-Allow-Origin\", \"*\");\n      var header = {\n        \"content-type\": \"application/json\"\n      }; // if (method !== 'GET') {\n      //     options.body = JSON.stringify(body)\n      // }\n\n      return yield _this.http.request(method.trim(), url, {\n        \"headers\": header,\n        \"params\": options,\n        \"body\": body\n      }).toPromise().then(response => {\n        Swal.close();\n\n        if (response.status == \"SUCCESS\") {\n          return response;\n        } else {\n          Swal.fire({\n            title: StringConstants.serverErrorTitle,\n            text: StringConstants.serverErrorDescription,\n            confirmButtonText: \"Reload\",\n            icon: 'error'\n          }).then(() => _this.fetchRequest(url, method, body, operationFuction, callOperationFunction));\n        }\n      }, error => {\n        console.log(\"Error\", error);\n        Swal.close(); // if (error.status == 500) {\n        //     Swal.fire({\n        //         title: StringConstants.serverErrorTitle,\n        //         text: StringConstants.serverErrorDescription,\n        //         confirmButtonText: \"Reload\",\n        //         icon: 'error',\n        //     }).then(() => this.fetchRequest(url, method, body, operationFuction, callOperationFunction));\n        // } else {\n        //     Swal.fire({\n        //         title: StringConstants.networkErrorTitle,\n        //         text: StringConstants.networkErrorDescription,\n        //         confirmButtonText: \"Okay\",\n        //         icon: 'error',\n        //     }).then(() => this.router.navigateByUrl(\"/network-error\"));\n        // }\n      });\n    })();\n  }\n\n}\n\nHTTPService.ɵfac = function HTTPService_Factory(t) {\n  return new (t || HTTPService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nHTTPService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HTTPService,\n  factory: HTTPService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/priyanka/Desktop/ODU_Projects/anim/src/app/services/http.service.ts"],"names":["StringConstants","HttpHeaders","Swal","i0","i1","i2","HTTPService","constructor","http","router","fetchRequest","url","method","body","operationFuction","callOperationFunction","fire","title","loadingTitle","text","loadingDescription","allowOutsideClick","showLoading","options","headers","set","header","request","trim","toPromise","then","response","close","status","serverErrorTitle","serverErrorDescription","confirmButtonText","icon","error","console","log","ɵfac","HTTPService_Factory","t","ɵɵinject","HttpClient","Router","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { StringConstants } from \"src/app/constants/string.constants\";\nimport { HttpHeaders } from '@angular/common/http';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class HTTPService {\n    constructor(http, router) {\n        this.http = http;\n        this.router = router;\n    }\n    async fetchRequest(url, method, body, operationFuction, callOperationFunction) {\n        Swal.fire({\n            title: StringConstants.loadingTitle,\n            text: StringConstants.loadingDescription,\n            allowOutsideClick: false,\n        });\n        Swal.showLoading();\n        // *GET, POST, PUT, DELETE,\n        var options = {\n            \"mode\": 'cors',\n            \"cache\": 'no-cache',\n            \"credentials\": 'same-origin', // include, *same-origin, omit\n        };\n        var headers = new HttpHeaders()\n            .set(\"content-type\", \"application/json\")\n            .set(\"Access-Control-Allow-Origin\", \"*\");\n        var header = {\n            \"content-type\": \"application/json\",\n        };\n        // if (method !== 'GET') {\n        //     options.body = JSON.stringify(body)\n        // }\n        return await this.http.request(method.trim(), url, {\n            \"headers\": header,\n            \"params\": options,\n            \"body\": body,\n        }).toPromise().then((response) => {\n            Swal.close();\n            if (response.status == \"SUCCESS\") {\n                return response;\n            }\n            else {\n                Swal.fire({\n                    title: StringConstants.serverErrorTitle,\n                    text: StringConstants.serverErrorDescription,\n                    confirmButtonText: \"Reload\",\n                    icon: 'error',\n                }).then(() => this.fetchRequest(url, method, body, operationFuction, callOperationFunction));\n            }\n        }, (error) => {\n            console.log(\"Error\", error);\n            Swal.close();\n            // if (error.status == 500) {\n            //     Swal.fire({\n            //         title: StringConstants.serverErrorTitle,\n            //         text: StringConstants.serverErrorDescription,\n            //         confirmButtonText: \"Reload\",\n            //         icon: 'error',\n            //     }).then(() => this.fetchRequest(url, method, body, operationFuction, callOperationFunction));\n            // } else {\n            //     Swal.fire({\n            //         title: StringConstants.networkErrorTitle,\n            //         text: StringConstants.networkErrorDescription,\n            //         confirmButtonText: \"Okay\",\n            //         icon: 'error',\n            //     }).then(() => this.router.navigateByUrl(\"/network-error\"));\n            // }\n        });\n    }\n}\nHTTPService.ɵfac = function HTTPService_Factory(t) { return new (t || HTTPService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router)); };\nHTTPService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: HTTPService, factory: HTTPService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}