{"ast":null,"code":"import _asyncToGenerator from \"/Users/priyanka/Desktop/ODU_Projects/anim/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class HTTPService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n  }\n\n  fetchRequest(url, method, body, operationFuction, callOperationFunction) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // Swal.fire({\n      //     title: StringConstants.loadingTitle,\n      //     text: StringConstants.loadingDescription,\n      //     allowOutsideClick: false,\n      // });\n      // Swal.showLoading();\n      // *GET, POST, PUT, DELETE,\n      var options = {\n        \"mode\": 'cors',\n        \"cache\": 'no-cache',\n        \"credentials\": 'same-origin' // include, *same-origin, omit\n\n      };\n      var headers = new HttpHeaders().set(\"content-type\", \"application/json\").set(\"Access-Control-Allow-Origin\", \"*\");\n      var header = {\n        \"content-type\": \"application/json\"\n      }; // if (method !== 'GET') {\n      //     options.body = JSON.stringify(body)\n      // }\n\n      return yield _this.http.request(method.trim(), url, {\n        \"headers\": header,\n        \"params\": options,\n        \"body\": body\n      }).toPromise().then(response => {\n        Swal.close();\n\n        if (response.status == \"SUCCESS\") {\n          return response;\n        } else {// Swal.fire({\n          //     title: StringConstants.serverErrorTitle,\n          //     text: StringConstants.serverErrorDescription,\n          //     confirmButtonText: \"Reload\",\n          //     icon: 'error',\n          // }).then(() => this.fetchRequest(url, method, body, operationFuction, callOperationFunction));\n        }\n      }, error => {\n        console.log(\"Error\", error); // Swal.close();\n        // if (error.status == 500) {\n        //     Swal.fire({\n        //         title: StringConstants.serverErrorTitle,\n        //         text: StringConstants.serverErrorDescription,\n        //         confirmButtonText: \"Reload\",\n        //         icon: 'error',\n        //     }).then(() => this.fetchRequest(url, method, body, operationFuction, callOperationFunction));\n        // } else {\n        //     Swal.fire({\n        //         title: StringConstants.networkErrorTitle,\n        //         text: StringConstants.networkErrorDescription,\n        //         confirmButtonText: \"Okay\",\n        //         icon: 'error',\n        //     }).then(() => this.router.navigateByUrl(\"/network-error\"));\n        // }\n      });\n    })();\n  }\n\n}\n\nHTTPService.ɵfac = function HTTPService_Factory(t) {\n  return new (t || HTTPService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nHTTPService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HTTPService,\n  factory: HTTPService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/priyanka/Desktop/ODU_Projects/anim/src/app/services/http.service.ts"],"names":["HttpHeaders","Swal","i0","i1","i2","HTTPService","constructor","http","router","fetchRequest","url","method","body","operationFuction","callOperationFunction","options","headers","set","header","request","trim","toPromise","then","response","close","status","error","console","log","ɵfac","HTTPService_Factory","t","ɵɵinject","HttpClient","Router","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACtB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACKC,EAAAA,YAAY,CAACC,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAoBC,gBAApB,EAAsCC,qBAAtC,EAA6D;AAAA;;AAAA;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAIC,OAAO,GAAG;AACV,gBAAQ,MADE;AAEV,iBAAS,UAFC;AAGV,uBAAe,aAHL,CAGoB;;AAHpB,OAAd;AAKA,UAAIC,OAAO,GAAG,IAAIhB,WAAJ,GACTiB,GADS,CACL,cADK,EACW,kBADX,EAETA,GAFS,CAEL,6BAFK,EAE0B,GAF1B,CAAd;AAGA,UAAIC,MAAM,GAAG;AACT,wBAAgB;AADP,OAAb,CAhB2E,CAmB3E;AACA;AACA;;AACA,mBAAa,KAAI,CAACX,IAAL,CAAUY,OAAV,CAAkBR,MAAM,CAACS,IAAP,EAAlB,EAAiCV,GAAjC,EAAsC;AAC/C,mBAAWQ,MADoC;AAE/C,kBAAUH,OAFqC;AAG/C,gBAAQH;AAHuC,OAAtC,EAIVS,SAJU,GAIEC,IAJF,CAIQC,QAAD,IAAc;AAC9BtB,QAAAA,IAAI,CAACuB,KAAL;;AACA,YAAID,QAAQ,CAACE,MAAT,IAAmB,SAAvB,EAAkC;AAC9B,iBAAOF,QAAP;AACH,SAFD,MAGK,CACD;AACA;AACA;AACA;AACA;AACA;AACH;AACJ,OAjBY,EAiBTG,KAAD,IAAW;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB,EADU,CAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,OAnCY,CAAb;AAtB2E;AA0D9E;;AA/DoB;;AAiEzBrB,WAAW,CAACwB,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAI1B,WAAV,EAAuBH,EAAE,CAAC8B,QAAH,CAAY7B,EAAE,CAAC8B,UAAf,CAAvB,EAAmD/B,EAAE,CAAC8B,QAAH,CAAY5B,EAAE,CAAC8B,MAAf,CAAnD,CAAP;AAAoF,CAAzI;;AACA7B,WAAW,CAAC8B,KAAZ,GAAoB,aAAcjC,EAAE,CAACkC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEhC,WAAT;AAAsBiC,EAAAA,OAAO,EAAEjC,WAAW,CAACwB,IAA3C;AAAiDU,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class HTTPService {\n    constructor(http, router) {\n        this.http = http;\n        this.router = router;\n    }\n    async fetchRequest(url, method, body, operationFuction, callOperationFunction) {\n        // Swal.fire({\n        //     title: StringConstants.loadingTitle,\n        //     text: StringConstants.loadingDescription,\n        //     allowOutsideClick: false,\n        // });\n        // Swal.showLoading();\n        // *GET, POST, PUT, DELETE,\n        var options = {\n            \"mode\": 'cors',\n            \"cache\": 'no-cache',\n            \"credentials\": 'same-origin', // include, *same-origin, omit\n        };\n        var headers = new HttpHeaders()\n            .set(\"content-type\", \"application/json\")\n            .set(\"Access-Control-Allow-Origin\", \"*\");\n        var header = {\n            \"content-type\": \"application/json\",\n        };\n        // if (method !== 'GET') {\n        //     options.body = JSON.stringify(body)\n        // }\n        return await this.http.request(method.trim(), url, {\n            \"headers\": header,\n            \"params\": options,\n            \"body\": body,\n        }).toPromise().then((response) => {\n            Swal.close();\n            if (response.status == \"SUCCESS\") {\n                return response;\n            }\n            else {\n                // Swal.fire({\n                //     title: StringConstants.serverErrorTitle,\n                //     text: StringConstants.serverErrorDescription,\n                //     confirmButtonText: \"Reload\",\n                //     icon: 'error',\n                // }).then(() => this.fetchRequest(url, method, body, operationFuction, callOperationFunction));\n            }\n        }, (error) => {\n            console.log(\"Error\", error);\n            // Swal.close();\n            // if (error.status == 500) {\n            //     Swal.fire({\n            //         title: StringConstants.serverErrorTitle,\n            //         text: StringConstants.serverErrorDescription,\n            //         confirmButtonText: \"Reload\",\n            //         icon: 'error',\n            //     }).then(() => this.fetchRequest(url, method, body, operationFuction, callOperationFunction));\n            // } else {\n            //     Swal.fire({\n            //         title: StringConstants.networkErrorTitle,\n            //         text: StringConstants.networkErrorDescription,\n            //         confirmButtonText: \"Okay\",\n            //         icon: 'error',\n            //     }).then(() => this.router.navigateByUrl(\"/network-error\"));\n            // }\n        });\n    }\n}\nHTTPService.ɵfac = function HTTPService_Factory(t) { return new (t || HTTPService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router)); };\nHTTPService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: HTTPService, factory: HTTPService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}