{"version":3,"file":"ng-audio-recorder.js","sources":["ng-audio-recorder/lib/ng-audio-recorder.service.ts","ng-audio-recorder/lib/ng-audio-recorder.module.ts","ng-audio-recorder/public-api.ts","ng-audio-recorder/ng-audio-recorder.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\n\ndeclare var MediaRecorder: any;\n\n@Injectable()\nexport class NgAudioRecorderService {\n\n  private chunks: Array<any> = [];\n  protected recorderEnded = new EventEmitter();\n  public recorderError = new EventEmitter<ErrorCase>();\n  // tslint:disable-next-line\n  private _recorderState = RecorderState.INITIALIZING;\n\n  constructor() {\n  }\n\n  private recorder: any;\n\n\n  private static guc() {\n    return navigator.mediaDevices.getUserMedia({audio: true});\n  }\n\n\n  getUserContent() {\n    return NgAudioRecorderService.guc();\n  }\n\n  startRecording() {\n    if (this._recorderState === RecorderState.RECORDING) {\n      this.recorderError.emit(ErrorCase.ALREADY_RECORDING);\n    }\n    if (this._recorderState === RecorderState.PAUSED) {\n      this.resume();\n      return;\n    }\n    this._recorderState = RecorderState.INITIALIZING;\n    NgAudioRecorderService.guc().then((mediaStream) => {\n      this.recorder = new MediaRecorder(mediaStream);\n      this._recorderState = RecorderState.INITIALIZED;\n      this.addListeners();\n      this.recorder.start();\n      this._recorderState = RecorderState.RECORDING;\n    });\n  }\n\n  pause() {\n    if (this._recorderState === RecorderState.RECORDING) {\n      this.recorder.pause();\n      this._recorderState = RecorderState.PAUSED;\n    }\n  }\n\n  resume() {\n    if (this._recorderState === RecorderState.PAUSED) {\n      this._recorderState = RecorderState.RECORDING;\n      this.recorder.resume();\n    }\n  }\n\n  stopRecording(outputFormat: OutputFormat) {\n    this._recorderState = RecorderState.STOPPING;\n    return new Promise((resolve, reject) => {\n      this.recorderEnded.subscribe((blob) => {\n        this._recorderState = RecorderState.STOPPED;\n        if (outputFormat === OutputFormat.WEBM_BLOB) {\n          resolve(blob);\n        }\n        if (outputFormat === OutputFormat.WEBM_BLOB_URL) {\n          const audioURL = URL.createObjectURL(blob);\n          resolve(audioURL);\n        }\n      }, _ => {\n        this.recorderError.emit(ErrorCase.RECORDER_TIMEOUT);\n        reject(ErrorCase.RECORDER_TIMEOUT);\n      });\n      this.recorder.stop();\n    }).catch(() => {\n      this.recorderError.emit(ErrorCase.USER_CONSENT_FAILED);\n    });\n  }\n\n  getRecorderState() {\n    return this._recorderState;\n  }\n\n  private addListeners() {\n    this.recorder.ondataavailable = this.appendToChunks;\n    this.recorder.onstop = this.recordingStopped;\n  }\n\n  private appendToChunks = (event: any) => {\n    this.chunks.push(event.data);\n  };\n  private recordingStopped = (event: any) => {\n    const blob = new Blob(this.chunks, {type: 'audio/webm'});\n    this.chunks = [];\n    this.recorderEnded.emit(blob);\n    this.clear();\n  };\n\n  private clear() {\n    this.recorder = null;\n    this.chunks = [];\n  }\n}\n\n\nexport enum OutputFormat {\n  WEBM_BLOB_URL,\n  WEBM_BLOB,\n}\n\nexport enum ErrorCase {\n  USER_CONSENT_FAILED,\n  RECORDER_TIMEOUT,\n  ALREADY_RECORDING\n}\n\nexport enum RecorderState {\n  INITIALIZING,\n  INITIALIZED,\n  RECORDING,\n  PAUSED,\n  STOPPING,\n  STOPPED\n}\n","import { NgModule } from '@angular/core';\nimport { NgAudioRecorderService } from './ng-audio-recorder.service';\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: [],\n  providers: [\n    NgAudioRecorderService\n  ]\n})\nexport class NgAudioRecorderModule { }\n","/*\n * Public API Surface of ng-audio-recorder\n */\n\nexport * from './lib/ng-audio-recorder.service';\nexport * from './lib/ng-audio-recorder.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}